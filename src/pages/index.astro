---
import BlogPost from '../islands/blogPost/BlogPost.astro';
import App from '../layouts/App.astro';

import '../styles/pagination.css';

const allPosts = await Astro.glob('../pages/posts/*.md');
const pageTitle = 'ijij log';

allPosts.sort((a, b) => {
  const aDate = new Date(a.frontmatter.date);
  const bDate = new Date(b.frontmatter.date);
  return bDate.getTime() - aDate.getTime();
});
---
<App pageTitle={pageTitle}>
  <ul id="paginated-list" style="display: none;">
    {allPosts.map((post) => <BlogPost url={post.url} frontmatter={post.frontmatter} />)}
  </ul>

  <nav class="pagination-container">
    <nav class="pagination-container">
      <button class="pagination-button" id="prev-button" title="Previous page" aria-label="Previous page">
        &lt;
      </button>
      <div id="pagination-numbers"></div>
      <button class="pagination-button" id="next-button" title="Next page" aria-label="Next page">
        &gt;
      </button>
    </nav>
  </nav>

  <script>
    const paginationNumbers = document.getElementById("pagination-numbers");
    const paginatedList = document.getElementById("paginated-list");
    const listItems = paginatedList.querySelectorAll("li");
    const nextButton = document.getElementById("next-button");
    const prevButton = document.getElementById("prev-button");

    const paginationLimit = 30;
    const pageCount = Math.ceil(listItems.length / paginationLimit);
    let currentPage;

    let url = new URL(window.location.href);
    let params = url.searchParams;
    let page = !!params.get('page') ? params.get('page') : 1;

    const appendPageNumber = (index) => {
      const pageNumber = document.createElement("button");
      pageNumber.className = "pagination-number";
      pageNumber.innerHTML = index;
      pageNumber.setAttribute("page-index", index);
      pageNumber.setAttribute("aria-label", "Page " + index);
      paginationNumbers.appendChild(pageNumber);
    };
    const getPaginationNumbers = () => {
      for (let i = 1; i <= pageCount; i++) {
        appendPageNumber(i);
      }
    };

    const handleActivePageNumber = () => {
      document.querySelectorAll(".pagination-number").forEach((button) => {
        button.classList.remove("active");
        
        const pageIndex = Number(button.getAttribute("page-index"));
        if (pageIndex == currentPage) {
          button.classList.add("active");
        }
      });
    };

    const setCurrentPage = (pageNum) => {
      currentPage = pageNum;
      handleActivePageNumber();
      handlePageButtonsStatus();
      
      const prevRange = (pageNum - 1) * paginationLimit;
      const currRange = pageNum * paginationLimit;
      listItems.forEach((item, index) => {
        item.classList.add("pagination-hidden");
        if (index >= prevRange && index < currRange) {
          item.classList.remove("pagination-hidden");
        }
      });

      if (params.has("page")) {
          params.set("page", String(pageNum));
      } else {
          params.set("page", String(pageNum));
      }
      url.search = params.toString();
      window.history.replaceState({}, '', url);
    };

    window.addEventListener("load", () => {
      getPaginationNumbers();
      setCurrentPage(page);

      prevButton.addEventListener("click", () => {
        setCurrentPage(currentPage - 1);
      });
      nextButton.addEventListener("click", () => {
        setCurrentPage(currentPage + 1);
      });
      document.querySelectorAll(".pagination-number").forEach((button) => {
        const pageIndex = Number(button.getAttribute("page-index"));
        if (pageIndex) {
          button.addEventListener("click", () => {
            setCurrentPage(pageIndex);
          });
        }
      });

      paginatedList.style.display = "block";
    });

    const disableButton = (button) => {
      button.classList.add("disabled");
      button.setAttribute("disabled", true);
    };
    const enableButton = (button) => {
      button.classList.remove("disabled");
      button.removeAttribute("disabled");
    };
    const handlePageButtonsStatus = () => {
      if (currentPage === 1) {
        disableButton(prevButton);
      } else {
        enableButton(prevButton);
      }
      if (pageCount === currentPage) {
        disableButton(nextButton);
      } else {
        enableButton(nextButton);
      }
    };
  </script>
</App>